@page "/Aporte/Create"
@inject AportesService aportesService
@rendermode InteractiveServer

<PageTitle>Registro de Aportes</PageTitle>

<EditForm Model="Aporte" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="container mt-4">
        <div class="card p-3 shadow-lg">

            <div class="card-header text-center">
                <h4><strong>Registro de Aportes</strong></h4>
            </div>

            <div class="card-body">
                <div class="row">
                    @* AporteId y Fecha en la misma fila *@
                    <div class="col-md-6">
                        <label class="form-label"><strong>AporteId</strong></label>
                        <div class="input-group">
                            <InputNumber class="form-control" @bind-Value="Aporte.AporteId" readonly />
                            <span class="input-group-text"><i class="bi bi-file-earmark-text"></i></span>
                        </div>
                    </div>

                    <div class="col-md-6">
                        <label class="form-label"><strong>Fecha</strong></label>
                        <InputDate class="form-control" @bind-Value="Aporte.Fecha"></InputDate>
                    </div>
                </div>

                @* Persona *@
                <div class="mb-3">
                    <label class="form-label"><strong>Persona</strong></label>
                    <InputText class="form-control" @bind-Value="Aporte.Persona"></InputText>
                    <ValidationMessage For="@(() => Aporte.Persona)" />
                </div>

                @* Observación *@
                <div class="mb-3">
                    <label class="form-label"><strong>Observación</strong></label>
                    <InputText class="form-control" @bind-Value="Aporte.Observacion"></InputText>
                    <ValidationMessage For="@(() => Aporte.Observacion)" />
                </div>

                @* Monto *@
                <div class="mb-3">
                    <label class="form-label"><strong>Monto</strong></label>
                    <InputNumber class="form-control" @bind-Value="Aporte.Monto"></InputNumber>
                    <ValidationMessage For="@(() => Aporte.Monto)" />
                </div>
            </div>

            @* Botones en fila centrados *@
            <div class="card-footer text-center mt-2">
                <button type="button" @onclick="Nuevo" class="btn btn-outline-primary">
                    <i class="bi bi-file-earmark"></i> Nuevo
                </button>
                <button type="button" @onclick="Eliminar" class="btn btn-outline-danger" disabled="@(Aporte.AporteId == 0)">
                    <i class="bi bi-trash"></i> Eliminar
                </button>
                <button type="submit" class="btn btn-outline-success">
                    <i class="bi bi-save"></i> Guardar
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    public Aportes Aporte { get; set; } = new Aportes();
    public string message = string.Empty;

    [Parameter]
    public int AporteId { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        if (AporteId > 0)
        {
            var aporteBuscado = await aportesService.Buscar(AporteId);
            Aporte = aporteBuscado ?? new Aportes();
        }
        else
        {
            Aporte = new Aportes();
        }
        await base.OnInitializedAsync();
    }

    public void Nuevo()
    {
        Aporte = new Aportes { Fecha = DateTime.Today };
        message = string.Empty;
    }

    public async Task Guardar()
    {
        var guardo = await aportesService.Guardar(Aporte);
        if (guardo) Nuevo();
    }

    public async Task Eliminar()
    {
        if (Aporte.AporteId == 0)
        {
            message = "No hay un aporte seleccionado para eliminar.";
            return;
        }
        bool confirmar = await JS.InvokeAsync<bool>("confirm", "¿Estás seguro de que deseas eliminar este aporte?");
        if (confirmar)
        {
            var eliminado = await aportesService.Eliminar(Aporte.AporteId);
            if (eliminado) Nuevo();
        }
    }

    [Inject]
    public IJSRuntime JS { get; set; }
}
